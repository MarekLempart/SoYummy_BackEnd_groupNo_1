<h1>Zestawienie END POINTS</h1>
https://deploy-marek-b05855e6af89.herokuapp.com/api-docs/


SoYummy_BackEnd_groupNo_1/
â”‚
â”œâ”€â”€ .env
â”œâ”€â”€ .env.example
â”œâ”€â”€ app.js
â”œâ”€â”€ package.json
â”œâ”€â”€ package-lock.json
â”‚
â”œâ”€â”€ config/
â”‚   â””â”€â”€ passport.js
â”‚
â”œâ”€â”€ controllers/
â”‚   â”œâ”€â”€ auth.controller.js
â”‚   â”œâ”€â”€ recipe.controller.js
â”‚   â”œâ”€â”€ auth/
â”‚   â”‚   â”œâ”€â”€ login.js
â”‚   â”‚   â”œâ”€â”€ logout.js
â”‚   â”‚   â”œâ”€â”€ resendVerificationEmail.js
â”‚   â”‚   â”œâ”€â”€ signup.js
â”‚   â”‚   â”œâ”€â”€ updateMail.js
â”‚   â”‚   â”œâ”€â”€ updateName.js
â”‚   â”‚   â”œâ”€â”€ updatePassword.js
â”‚   â”‚   â”œâ”€â”€ verifyEmail.js
â”‚   â”œâ”€â”€ recipes/
â”‚   â”‚   â”œâ”€â”€ create.js
â”‚   â”‚   â”œâ”€â”€ get.js
â”‚   â”‚   â”œâ”€â”€ getById.js
â”‚   â”‚   â”œâ”€â”€ remove.js
â”‚   â”‚   â”œâ”€â”€ update.js
â”‚
â”œâ”€â”€ middlewares/
â”‚   â””â”€â”€ auth.js
â”‚
â”œâ”€â”€ models/
â”‚   â”œâ”€â”€ recipe.model.js
â”‚   â””â”€â”€ user.model.js
â”‚
â”œâ”€â”€ routes/
â”‚   â”œâ”€â”€ auth.routes.js
â”‚   â”œâ”€â”€ email.routes.js
â”‚   â””â”€â”€ recipes.routes.js
â”‚
â”œâ”€â”€ services/
â”‚   â”œâ”€â”€ email.service.js
â”‚   â”œâ”€â”€ helpers.js
â”‚   â””â”€â”€ recipes.service.js
â”‚
â”œâ”€â”€ templates/
â”‚   â””â”€â”€ emailTemplate.mjml
â”‚
â””â”€â”€ validations/
    â””â”€â”€ validation.js

Opis struktury
config/: Zawiera konfiguracjÄ™, np. strategiÄ™ Passport.js dla uwierzytelniania.
controllers/: Zawiera kontrolery odpowiedzialne za logikÄ™ biznesowÄ…. Rozdzielone na kontrolery autoryzacji i zarzÄ…dzania przepisami.
middlewares/: Åšrodkowe oprogramowanie, np. autoryzacja.
models/: Modele Mongoose definiujÄ…ce schematy danych dla uÅ¼ytkownikÃ³w i przepisÃ³w.
routes/: Definicje Å›cieÅ¼ek API dla rÃ³Å¼nych funkcjonalnoÅ›ci.
services/: ModuÅ‚y pomocnicze, np. wysyÅ‚anie e-maili.
templates/: Szablony e-maili.
validations/: Walidacja danych wejÅ›ciowych.
Graficzny schemat aplikacji

TytuÅ‚: Schemat aplikacji "SoYummy_BackEnd_groupNo_1"

+------------------+
| Client Interface |  <--- JSON Requests (Postman/Insomnia)
+------------------+
          |
          v
+----------------+
|   app.js       |
|   (Express.js) |
+----------------+
          |
          v
+-------------------------+
|     Routes              |
| (auth, recipes, emails) |
+-------------------------+
          |
          v
+---------------------------+
|    Controllers            |
| (auth.controller,         |
|  recipe.controller,       |
|  auth/[login, signup...], |
|  recipes/[create, get...])|
+---------------------------+
          |
          v
+-----------------------+
|      Services         |
| (email.service,       |
|  recipes.service,     |
|  helpers)             |
+-----------------------+
          |
          v
+---------------------+
|      Models         |
| (user.model,        |
|  recipe.model)      |
+---------------------+
          |
          v
+------------------------+
| MongoDB Database       |
+------------------------+

Client Interface: UÅ¼ytkownicy koÅ„cowi interfejsu aplikacji (np. Postman, Insomnia) wysyÅ‚ajÄ… Å¼Ä…dania HTTP.
app.js: GÅ‚Ã³wny plik aplikacji Express.js, ktÃ³ry uruchamia serwer i rejestruje Å›cieÅ¼ki.
Routes: DefiniujÄ… Å›cieÅ¼ki API i kierujÄ… Å¼Ä…dania do odpowiednich kontrolerÃ³w.
Controllers: PrzetwarzajÄ… logikÄ™ biznesowÄ…, wywoÅ‚ujÄ…c odpowiednie usÅ‚ugi i zwracajÄ…c odpowiedzi.
Services: OferujÄ… funkcje pomocnicze, np. wysyÅ‚anie e-maili, operacje na bazie danych.
Models: DefiniujÄ… schematy danych w MongoDB.
MongoDB Database: Przechowuje dane uÅ¼ytkownikÃ³w, przepisÃ³w i inne.
Ten schemat ilustruje przepÅ‚yw danych od klienta do bazy danych oraz organizacjÄ™ kodu wedÅ‚ug funkcji i odpowiedzialnoÅ›ci.
ðŸ˜Š
